#!/usr/bin/env python
#
# Copyright (c) 2017, NORDUnet A/S All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# - Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# - Neither the name of the NORDUnet nor the names of its contributors may
#   be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
Console client shim to work with Cryptech Python multiplexer.
"""

import os
import sys
import socket
import atexit
import termios
import argparse

import tornado.iostream
import tornado.ioloop
import tornado.gen


class FemtoTerm(object):

    def __init__(self, s):
        self.termios_setup()
        self.stdin_stream  = tornado.iostream.PipeIOStream(sys.stdin.fileno())
        self.stdout_stream = tornado.iostream.PipeIOStream(sys.stdout.fileno())
        self.socket_stream = tornado.iostream.IOStream(s)
        self.closed = False

    def termios_setup(self):
        self.fd = sys.stdin.fileno()
        self.old_tcattr = termios.tcgetattr(self.fd)
        self.new_tcattr = termios.tcgetattr(self.fd)
        atexit.register(self.termios_teardown)
        self.new_tcattr[3] &= ~(termios.ICANON | termios.ECHO) #  | termios.ISIG
        self.new_tcattr[6][termios.VMIN] = 1
        self.new_tcattr[6][termios.VTIME] = 0
        termios.tcsetattr(self.fd, termios.TCSANOW, self.new_tcattr)

    def termios_teardown(self):
        termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.old_tcattr)

    @tornado.gen.coroutine
    def stdin_loop(self):
        try:
            while not self.closed:
                buffer = yield self.stdin_stream.read_bytes(1024, partial = True)
                yield self.socket_stream.write(buffer.replace("\n", "\r"))
        except tornado.iostream.StreamClosedError:
            self.closed = True

    @tornado.gen.coroutine
    def stdout_loop(self):
        try:
            while not self.closed:
                buffer = yield self.socket_stream.read_bytes(1024, partial = True)
                yield self.stdout_stream.write(buffer.replace("\r\n", "\n"))
        except tornado.iostream.StreamClosedError:
            self.closed = True


@tornado.gen.coroutine
def main():
    parser = argparse.ArgumentParser(formatter_class = argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-v", "--verbose",  action = "store_true",  help = "produce human-readable output")
    parser.add_argument("-d", "--debug",    action = "store_true",  help = "blather about what we're doing")

    parser.add_argument("--cty-socket",            help = "CTY PF_UNIX socket name",
                        default = os.getenv("CRYPTECH_CTY_CLIENT_SOCKET_NAME", "/tmp/.cryptech_muxd.cty"))

    args = parser.parse_args()

    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    s.connect(args.cty_socket)

    term = FemtoTerm(s)

    if False:
        yield [term.stdin_loop(), term.stdout_loop()]

    else:
        stdout_future = term.stdout_loop()
        stdin_future  = term.stdin_loop()
        yield stdout_future
        sys.stdin.close()
        yield stdin_future


if __name__ == "__main__":
    try:
        tornado.ioloop.IOLoop.current().run_sync(main)
    except KeyboardInterrupt:
        pass
